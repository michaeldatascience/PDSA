{"cells":[{"cell_type":"markdown","metadata":{"id":"nn9pnb6MP6p6"},"source":["Dikjstra's Algorithm using Adjacent Weightest List"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":480,"status":"ok","timestamp":1692473126442,"user":{"displayName":"Almichael","userId":"11636056891479221603"},"user_tz":-330},"id":"p4IIBUdBQRgL"},"outputs":[{"ename":"SyntaxError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"\u003cipython-input-6-a2a84ca32467\u003e\"\u001b[0;36m, line \u001b[0;32m14\u001b[0m\n\u001b[0;31m    infinity = len(AList) * max(weight,_for item in [item for subitem in A.items() for item in subitem ] )\u001b[0m\n\u001b[0m                                       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"]}],"source":["def dijkstraList(AList, s):\n","  #print (AList)\n","  # 1. Calculate Infinity\n","  # 2. Initialize dictionaries distance visited\n","  # 3. set start vertex as visited\n","  # 4. Loop\n","  # 4.1  Calculate Minimum Distance among unvisited Nodes\n","  # 4.2  Find minimum vertex from the above list as NextVertex\n","  # 4.2.1  Iterate through all neighbors of this nextVertex\n","  # 4.2.2  Mark this nextVertex as visited\n","  # 4.2.3  Recalculate distance of the neighbor\n","\n","  # 1. Infinity\n","  infinity = len(AList) * max(weight,_ for item in [item for subitem in A.items() for item in subitem ] )\n","  print(infinity)"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":410,"status":"ok","timestamp":1692473128930,"user":{"displayName":"Almichael","userId":"11636056891479221603"},"user_tz":-330},"id":"br6TggjwQKzy","outputId":"889e1146-7915-449f-a30b-0a13ea018281"},"outputs":[{"name":"stdout","output_type":"stream","text":["{0: [(1, 10), (2, 50), (3, 300)], 1: [(0, 10), (2, 30), (6, 65), (3, 40)], 2: [(0, 50), (1, 30), (5, 76), (4, 20)], 3: [(0, 300), (1, 40), (4, 60)], 4: [(6, 37), (3, 60), (2, 20)], 5: [(6, 45), (2, 76)], 6: [(5, 45), (4, 37), (1, 65)]}\n","None\n"]}],"source":["A = {0: [(1, 10), (2, 50), (3, 300)], 1: [(0, 10), (2, 30), (6, 65), (3, 40)], 2: [(0, 50), (1, 30), (5, 76), (4, 20)], 3: [(0, 300), (1, 40), (4, 60)], 4: [(6, 37), (3, 60), (2,\n","20)], 5: [(6, 45), (2, 76)], 6: [(5, 45), (4, 37), (1, 65)]}\n","\n","result  = dijkstraList(A, 3)\n","print(result)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"txwAvfmtQM_J"},"outputs":[],"source":[]}],"metadata":{"colab":{"authorship_tag":"ABX9TyMXv3WnepWIFx9CRBfm7DIX","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}